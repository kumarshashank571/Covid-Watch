#include <Wire.h>
#include "MAX30100_PulseOximeter.h"
#include <ESPAsyncWebServer.h>
 #include <AsyncTCP.h>
  #include <SPIFFS.h>
 
  #include <Adafruit_ADS1015.h>
#include "MAX30100_PulseOximeter.h"


#include "Wire.h"
#include "Adafruit_GFX.h"
#include "OakOLED.h"
#define I2C_SDA 21
#define I2C_SCL 22
#define REPORTING_PERIOD_MS     1000
#define PLOTT_DATA 
#define MAX_BUFFER 100
#include <WiFi.h>
OakOLED oled;
 
 

#define REPORTING_PERIOD_MS     1000
 
float  BPM, SpO2;
 
/*Put your SSID & Password*/
const char* ssid = "NSUT-Campus";  // Enter SSID here
const char* password = "";  //Enter Password here
PulseOximeter pox;
Adafruit_ADS1115 ads(0x48); // define the types of external adc 
float temp = 0.0; // variable to store temperature value
int16_t adc0;
uint32_t tsLastReport = 0;
uint32_t prevData[MAX_BUFFER];
uint32_t sumData=0;
uint32_t maxData=0;
uint32_t avgData=0;
uint32_t roundrobin=0;
uint32_t countData=0;
uint32_t period=0;
uint32_t lastperiod=0;
uint32_t millistimer=millis();
double frequency;
double beatspermin=0;
uint32_t newData;
String readBME280Temperature() {
  // Read temperature as Celsius (the default)
  float t = temp;

  if (isnan(t)) {    
    Serial.println("Failed to read from BME280 sensor!");
    return "";
  }
  else {
    Serial.println(t);
    return String(t);
  }
}

String readBME280Humidity() {
  float h = BPM;
  if (isnan(h)) {
    Serial.println("Failed to read from BME280 sensor!");
    return "";
  }
  else {
    Serial.println(h);
    return String(h);
  }
}

String readBME280Pressure() {
  float p = SpO2;
  if (isnan(p)) {
    Serial.println("Failed to read from BME280 sensor!");
    return "";
  }
  else {
    Serial.println(p);
    return String(p);
  }
} 





 
 
AsyncWebServer server(80);             
 
void onBeatDetected()
{
  Serial.println("Beat!");
}
void freqDetec() {
  if (countData==MAX_BUFFER) {
   if (prevData[roundrobin] < avgData*1.5 && newData >= avgData*1.5){ // increasing and crossing last midpoint
    period = millis()-millistimer;//get period from current timer value
    millistimer = millis();//reset timer
    maxData = 0;
   }
  }
 roundrobin++;
 if (roundrobin >= MAX_BUFFER) {
    roundrobin=0;
 }
 if (countData<MAX_BUFFER) {
    countData++;
    sumData+=newData;
 } else {
    sumData+=newData-prevData[roundrobin];
 }
 avgData = sumData/countData;
 if (newData>maxData) {
  maxData = newData;
 }
 #ifdef PLOTT_DATA
  Serial.print(newData);
 Serial.print("\t");
 Serial.print(avgData);
 Serial.print("\t");
 Serial.print(avgData*1.5);
 Serial.print("\t");
 Serial.print(maxData);
 Serial.print("\t");
 Serial.println(beatspermin);
#endif
 prevData[roundrobin] = newData;//store previous value
}
 
void setup() {
  Serial.begin(115200);

  delay(100); 
    // Initialize SPIFFS
  if(!SPIFFS.begin()){
    Serial.println("An Error has occurred while mounting SPIFFS");
    return;
  }  
 
  Serial.println("Connecting to ");
  Serial.println(ssid);
 
  //connect to your local wi-fi network
  WiFi.begin(ssid, password);
 
  //check wi-fi is connected to wi-fi network
  while (WiFi.status() != WL_CONNECTED) {
  delay(1000);
  Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi connected..!");
  Serial.print("Got IP: ");  Serial.println(WiFi.localIP());

   // Route for root / web page
  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send(SPIFFS, "/index.html");
  });
  server.on("/temperature", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/plain", readBME280Temperature().c_str());
  });
  server.on("/humidity", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/plain", readBME280Humidity().c_str());
  });
  server.on("/pressure", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/plain", readBME280Pressure().c_str());
  });


 
  server.begin();
  delay(100);
  Serial.println("HTTP server started");
   ads.begin(); // start adc to read sensor value over I2C 
    Serial.begin(115200);
    Wire.begin(I2C_SDA, I2C_SCL);

    oled.begin();
    oled.clearDisplay();
    oled.setTextSize(1);
    oled.setTextColor(1);
    oled.setCursor(0, 0);

  oled.println("Initializing pulse oximeter..");
  oled.display();
 
  Serial.print("Initializing pulse oximeter..");
 
  if (!pox.begin()) {
    Serial.println("FAILED");
    for (;;);
  } else {
    Serial.println("SUCCESS");
    pox.setOnBeatDetectedCallback(onBeatDetected);
  }
 
   pox.setIRLedCurrent(MAX30100_LED_CURR_7_6MA);
 
  // Register a callback for the beat detection
 
}
void loop() {
  
  pox.update();
  
  
  

  BPM = pox.getHeartRate();
  SpO2 = pox.getSpO2();
  
   adc0 = ads.readADC_SingleEnded(0); // read ANO values
temp = (adc0 * 0.1875)/1000; // convert ADC value into voltage
temp = temp * 100; // converts voltage into temperature 10mv=1C
 
  
  if (millis() - tsLastReport > REPORTING_PERIOD_MS) 
  {
  
    
    Serial.print("BPM: ");
    Serial.println(BPM);
     Serial.print("-----");
    
    Serial.print("SpO2: ");
    Serial.print(SpO2);
    Serial.println("%");
 
    Serial.print("Body Temperature: ");
    Serial.print(temp);
     Serial.print("AIN0: "); 
        Serial.print(adc0);
    Serial.println("Â°C");
    
   
    Serial.println("\n");

     oled.clearDisplay();
        oled.setTextSize(2);
        oled.setTextColor(1);
        oled.setCursor(0,10);
        oled.println(BPM); 

         oled.setTextSize(1);
        oled.setTextColor(1);
        oled.setCursor(0, 0);
        oled.println("Heart BPM");

          oled.setTextSize(1);
        oled.setTextColor(1);
        oled.setCursor(0, 34);
        oled.println("Spo2 %");

         oled.setTextSize(2);
        oled.setTextColor(1);
        oled.setCursor(0,44);
        oled.println(SpO2);
        
       

oled.setTextSize(1);
oled.setTextColor(1);
oled.setCursor(60,34);
oled.println("Temperature");


oled.setTextSize(2);
oled.setTextColor(1);
oled.setCursor(60,44);
oled.println(temp);

 oled.display(); 
 
    tsLastReport = millis();
  }

   newData = analogRead(34);
  freqDetec();
  if (period!=lastperiod) {
     frequency = 1000/(double)period;//timer rate/period
     if (frequency*60 > 20 && frequency*60 < 200) { // supress unrealistic Data
      beatspermin=frequency*60;
#ifndef PLOTT_DATA
        Serial.print(frequency);
        Serial.print(" hz");
        Serial.print(" ");
        Serial.print(beatspermin);
        Serial.println(" bpm");
#endif
        lastperiod=period;
     }
  }
  
}
 
